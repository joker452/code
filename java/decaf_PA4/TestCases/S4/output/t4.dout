FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T3 _T4 _T5 _T6 ]
  defDU   = [ ]
  redef   = [ _T3 _T4 _T5 _T6 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ ]
  liveOutDU = [ ]
    1 _T3 = 12 [ _T3 ]
    2 parm _T3 [ ]
    3 _T4 =  call _Alloc [ _T4 ]
    4 _T5 = 0 [ _T4 _T5 ]
    5 *(_T4 + 4) = _T5 [ _T4 _T5 ]
    6 *(_T4 + 8) = _T5 [ _T4 ]
    7 _T6 = VTBL <_Main> [ _T4 _T6 ]
    8 *(_T4 + 0) = _T6 [ _T4 ]
END BY RETURN, result = _T4

FUNCTION _Main.tester : 
BASIC BLOCK 0 : 
  Def     = [ _T7 _T8 _T9 _T10 ]
  defDU   = [ (21, _T8) (25, _T8) ]
  redef   = [ _T7 _T8 _T9 _T10 ]
  liveUseDU = [ (10, _T0) ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 _T1 ]
  liveInDU = [ (10, _T0) (34, _T0) (36, _T1) (44, _T1) (48, _T1) ]
  liveOut = [ _T0 _T1 _T8 ]
  liveOutDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (21, _T8) (25, _T8) ]
    10 _T7 = *(_T0 + 8) [ _T0 _T1 ]
    11 _T8 = 1 [ _T0 _T1 _T8 ]
    12 _T9 = 0 [ _T0 _T1 _T8 _T9 ]
    13 _T10 = (_T8 < _T9) [ _T0 _T1 _T8 _T10 ]
END BY BEQZ, if _T10 = 
    0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T11 ]
  defDU   = [ ]
  redef   = [ _T11 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T0 _T1 _T8 ]
  liveInDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (21, _T8) (25, _T8) ]
  liveOut = [ _T0 _T1 _T8 ]
  liveOutDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (21, _T8) (25, _T8) ]
    15 _T11 = "Decaf runtime error: Cannot create negative-sized array\n" [ _T0 _T1 _T8 _T11 ]
    16 parm _T11 [ _T0 _T1 _T8 ]
    17 call _PrintString [ _T0 _T1 _T8 ]
    18 call _Halt [ _T0 _T1 _T8 ]
END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T12 _T13 _T14 _T15 _T16 ]
  defDU   = [ (29, _T12) (31, _T12) (29, _T14) (31, _T15) (34, _T15) (32, _T16) ]
  redef   = [ _T12 _T13 _T14 _T15 _T16 ]
  liveUseDU = [ (21, _T8) (25, _T8) ]
  liveUse = [ _T8 ]
  liveIn  = [ _T0 _T1 _T8 ]
  liveInDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (21, _T8) (25, _T8) ]
  liveOut = [ _T0 _T1 _T12 _T14 _T15 _T16 ]
  liveOutDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (29, _T12) (31, _T12) (29, _T14) (31, _T15) (34, _T15) (32, _T16) ]
    20 _T12 = 4 [ _T0 _T1 _T8 _T12 ]
    21 _T13 = (_T12 * _T8) [ _T0 _T1 _T8 _T12 _T13 ]
    22 _T14 = (_T12 + _T13) [ _T0 _T1 _T8 _T12 _T14 ]
    23 parm _T14 [ _T0 _T1 _T8 _T12 _T14 ]
    24 _T15 =  call _Alloc [ _T0 _T1 _T8 _T12 _T14 _T15 ]
    25 *(_T15 + 0) = _T8 [ _T0 _T1 _T12 _T14 _T15 ]
    26 _T16 = 0 [ _T0 _T16 _T1 _T12 _T14 _T15 ]
    27 _T15 = (_T15 + _T14) [ _T0 _T16 _T1 _T12 _T14 _T15 ]
END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ ]
  defDU   = [ (29, _T14) ]
  redef   = [ _T14 ]
  liveUseDU = [ (29, _T12) (29, _T14) ]
  liveUse = [ _T12 _T14 ]
  liveIn  = [ _T0 _T1 _T12 _T14 _T15 _T16 ]
  liveInDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (29, _T12) (31, _T12) (29, _T14) (31, _T15) (34, _T15) (32, _T16) ]
  liveOut = [ _T0 _T1 _T12 _T14 _T15 _T16 ]
  liveOutDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (29, _T12) (31, _T12) (29, _T14) (31, _T15) (34, _T15) (32, _T16) ]
    29 _T14 = (_T14 - _T12) [ _T0 _T16 _T1 _T12 _T14 _T15 ]
END BY BEQZ, if _T14 = 
    0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ ]
  defDU   = [ (31, _T15) (34, _T15) ]
  redef   = [ _T15 ]
  liveUseDU = [ (31, _T12) (31, _T15) (32, _T16) ]
  liveUse = [ _T12 _T15 _T16 ]
  liveIn  = [ _T0 _T1 _T12 _T14 _T15 _T16 ]
  liveInDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (29, _T12) (31, _T12) (29, _T14) (31, _T15) (32, _T16) ]
  liveOut = [ _T0 _T1 _T12 _T14 _T15 _T16 ]
  liveOutDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (29, _T12) (31, _T12) (29, _T14) (31, _T15) (34, _T15) (32, _T16) ]
    31 _T15 = (_T15 - _T12) [ _T0 _T16 _T1 _T12 _T14 _T15 ]
    32 *(_T15 + 0) = _T16 [ _T0 _T16 _T1 _T12 _T14 _T15 ]
END BY BRANCH, goto 3
BASIC BLOCK 5 : 
  Def     = [ _T17 _T18 ]
  defDU   = [ ]
  redef   = [ _T17 _T18 ]
  liveUseDU = [ (34, _T0) (36, _T1) (34, _T15) ]
  liveUse = [ _T0 _T1 _T15 ]
  liveIn  = [ _T0 _T1 _T15 ]
  liveInDU = [ (34, _T0) (36, _T1) (44, _T1) (48, _T1) (34, _T15) ]
  liveOut = [ _T1 ]
  liveOutDU = [ (44, _T1) (48, _T1) ]
    34 *(_T0 + 8) = _T15 [ _T1 ]
    35 _T17 = 0 [ _T1 _T17 ]
    36 _T18 = (_T1 < _T17) [ _T1 _T18 ]
END BY BEQZ, if _T18 = 
    0 : goto 7; 1 : goto 6
BASIC BLOCK 6 : 
  Def     = [ _T19 ]
  defDU   = [ ]
  redef   = [ _T19 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T1 ]
  liveInDU = [ (44, _T1) (48, _T1) ]
  liveOut = [ _T1 ]
  liveOutDU = [ (44, _T1) (48, _T1) ]
    38 _T19 = "Decaf runtime error: Cannot create negative-sized array\n" [ _T1 _T19 ]
    39 parm _T19 [ _T1 ]
    40 call _PrintString [ _T1 ]
    41 call _Halt [ _T1 ]
END BY BRANCH, goto 7
BASIC BLOCK 7 : 
  Def     = [ _T20 _T21 _T22 _T23 _T24 ]
  defDU   = [ (52, _T20) (54, _T20) (52, _T22) (54, _T23) (57, _T23) (55, _T24) ]
  redef   = [ _T20 _T21 _T22 _T23 _T24 ]
  liveUseDU = [ (44, _T1) (48, _T1) ]
  liveUse = [ _T1 ]
  liveIn  = [ _T1 ]
  liveInDU = [ (44, _T1) (48, _T1) ]
  liveOut = [ _T20 _T22 _T23 _T24 ]
  liveOutDU = [ (52, _T20) (54, _T20) (52, _T22) (54, _T23) (57, _T23) (55, _T24) ]
    43 _T20 = 4 [ _T1 _T20 ]
    44 _T21 = (_T20 * _T1) [ _T1 _T20 _T21 ]
    45 _T22 = (_T20 + _T21) [ _T1 _T20 _T22 ]
    46 parm _T22 [ _T1 _T20 _T22 ]
    47 _T23 =  call _Alloc [ _T1 _T20 _T22 _T23 ]
    48 *(_T23 + 0) = _T1 [ _T20 _T22 _T23 ]
    49 _T24 = 0 [ _T20 _T22 _T23 _T24 ]
    50 _T23 = (_T23 + _T22) [ _T20 _T22 _T23 _T24 ]
END BY BRANCH, goto 8
BASIC BLOCK 8 : 
  Def     = [ ]
  defDU   = [ (52, _T22) ]
  redef   = [ _T22 ]
  liveUseDU = [ (52, _T20) (52, _T22) ]
  liveUse = [ _T20 _T22 ]
  liveIn  = [ _T20 _T22 _T23 _T24 ]
  liveInDU = [ (52, _T20) (54, _T20) (52, _T22) (54, _T23) (57, _T23) (55, _T24) ]
  liveOut = [ _T20 _T22 _T23 _T24 ]
  liveOutDU = [ (52, _T20) (54, _T20) (52, _T22) (54, _T23) (57, _T23) (55, _T24) ]
    52 _T22 = (_T22 - _T20) [ _T20 _T22 _T23 _T24 ]
END BY BEQZ, if _T22 = 
    0 : goto 10; 1 : goto 9
BASIC BLOCK 9 : 
  Def     = [ ]
  defDU   = [ (54, _T23) (57, _T23) ]
  redef   = [ _T23 ]
  liveUseDU = [ (54, _T20) (54, _T23) (55, _T24) ]
  liveUse = [ _T20 _T23 _T24 ]
  liveIn  = [ _T20 _T22 _T23 _T24 ]
  liveInDU = [ (52, _T20) (54, _T20) (52, _T22) (54, _T23) (55, _T24) ]
  liveOut = [ _T20 _T22 _T23 _T24 ]
  liveOutDU = [ (52, _T20) (54, _T20) (52, _T22) (54, _T23) (57, _T23) (55, _T24) ]
    54 _T23 = (_T23 - _T20) [ _T20 _T22 _T23 _T24 ]
    55 *(_T23 + 0) = _T24 [ _T20 _T22 _T23 _T24 ]
END BY BRANCH, goto 8
BASIC BLOCK 10 : 
  Def     = [ ]
  defDU   = [ ]
  redef   = [ ]
  liveUseDU = [ (57, _T23) ]
  liveUse = [ _T23 ]
  liveIn  = [ _T23 ]
  liveInDU = [ (57, _T23) ]
  liveOut = [ ]
  liveOutDU = [ ]
END BY RETURN, result = _T23

FUNCTION _Main.start : 
BASIC BLOCK 0 : 
  Def     = [ _T25 _T28 ]
  defDU   = [ (62, _T25) (65, _T25) (70, _T25) (79, _T25) (85, _T25) ]
  redef   = [ _T25 _T28 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T2 _T27 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
  liveOut = [ _T2 _T25 _T27 ]
  liveOutDU = [ (69, _T2) (71, _T2) (62, _T25) (65, _T25) (70, _T25) (79, _T25) (85, _T25) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
    58 _T28 = 1 [ _T2 _T27 _T28 ]
    59 _T25 = _T28 [ _T2 _T25 _T27 ]
END BY BRANCH, goto 1
BASIC BLOCK 1 : 
  Def     = [ _T29 _T30 ]
  defDU   = [ ]
  redef   = [ _T29 _T30 ]
  liveUseDU = [ (62, _T25) ]
  liveUse = [ _T25 ]
  liveIn  = [ _T2 _T25 _T27 ]
  liveInDU = [ (69, _T2) (71, _T2) (62, _T25) (65, _T25) (70, _T25) (79, _T25) (85, _T25) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
  liveOut = [ _T2 _T25 _T27 ]
  liveOutDU = [ (69, _T2) (71, _T2) (65, _T25) (70, _T25) (79, _T25) (85, _T25) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
    61 _T29 = 5 [ _T2 _T25 _T27 _T29 ]
    62 _T30 = (_T25 < _T29) [ _T2 _T25 _T27 _T30 ]
END BY BEQZ, if _T30 = 
    0 : goto 5; 1 : goto 2
BASIC BLOCK 2 : 
  Def     = [ _T31 _T32 _T33 _T34 ]
  defDU   = [ ]
  redef   = [ _T31 _T32 _T33 _T34 ]
  liveUseDU = [ (65, _T25) ]
  liveUse = [ _T25 ]
  liveIn  = [ _T2 _T25 _T27 ]
  liveInDU = [ (69, _T2) (71, _T2) (65, _T25) (70, _T25) (79, _T25) (85, _T25) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
  liveOut = [ _T2 _T25 _T27 ]
  liveOutDU = [ (69, _T2) (71, _T2) (70, _T25) (79, _T25) (85, _T25) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
    64 _T31 = 2 [ _T2 _T25 _T27 _T31 ]
    65 _T32 = (_T25 % _T31) [ _T32 _T2 _T25 _T27 ]
    66 _T33 = 0 [ _T32 _T33 _T2 _T25 _T27 ]
    67 _T34 = (_T32 == _T33) [ _T2 _T34 _T25 _T27 ]
END BY BEQZ, if _T34 = 
    0 : goto 4; 1 : goto 3
BASIC BLOCK 3 : 
  Def     = [ _T27 _T35 _T36 _T37 ]
  defDU   = [ (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
  redef   = [ _T27 _T35 _T36 _T37 ]
  liveUseDU = [ (69, _T2) (71, _T2) (70, _T25) ]
  liveUse = [ _T2 _T25 ]
  liveIn  = [ _T2 _T25 ]
  liveInDU = [ (69, _T2) (71, _T2) (70, _T25) ]
  liveOut = [ _T2 _T27 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
    69 parm _T2 [ _T2 _T25 ]
    70 parm _T25 [ _T2 ]
    71 _T35 = *(_T2 + 0) [ _T2 _T35 ]
    72 _T36 = *(_T35 + 8) [ _T2 _T36 ]
    73 _T37 =  call _T36 [ _T2 _T37 ]
    74 _T27 = _T37 [ _T2 _T27 ]
END BY BRANCH, goto 5
BASIC BLOCK 4 : 
  Def     = [ _T38 _T39 _T40 _T41 ]
  defDU   = [ (62, _T25) (65, _T25) (70, _T25) (79, _T25) (85, _T25) ]
  redef   = [ _T25 _T38 _T39 _T40 _T41 ]
  liveUseDU = [ (79, _T25) (85, _T25) ]
  liveUse = [ _T25 ]
  liveIn  = [ _T2 _T25 _T27 ]
  liveInDU = [ (69, _T2) (71, _T2) (79, _T25) (85, _T25) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
  liveOut = [ _T2 _T25 _T27 ]
  liveOutDU = [ (69, _T2) (71, _T2) (62, _T25) (65, _T25) (70, _T25) (79, _T25) (85, _T25) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
    76 _T38 = "Loop " [ _T2 _T38 _T25 _T27 ]
    77 parm _T38 [ _T2 _T25 _T27 ]
    78 call _PrintString [ _T2 _T25 _T27 ]
    79 parm _T25 [ _T2 _T25 _T27 ]
    80 call _PrintInt [ _T2 _T25 _T27 ]
    81 _T39 = "\n" [ _T2 _T39 _T25 _T27 ]
    82 parm _T39 [ _T2 _T25 _T27 ]
    83 call _PrintString [ _T2 _T25 _T27 ]
    84 _T40 = 1 [ _T2 _T40 _T25 _T27 ]
    85 _T41 = (_T25 + _T40) [ _T2 _T41 _T27 ]
    86 _T25 = _T41 [ _T2 _T25 _T27 ]
END BY BRANCH, goto 1
BASIC BLOCK 5 : 
  Def     = [ _T42 _T43 _T44 ]
  defDU   = [ (93, _T42) (101, _T42) (106, _T42) ]
  redef   = [ _T42 _T43 _T44 ]
  liveUseDU = [ (89, _T27) ]
  liveUse = [ _T27 ]
  liveIn  = [ _T2 _T27 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
  liveOut = [ _T2 _T27 _T42 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (93, _T42) (101, _T42) (106, _T42) ]
    88 _T42 = 0 [ _T2 _T42 _T27 ]
    89 _T43 = *(_T27 - 4) [ _T2 _T42 _T27 _T43 ]
    90 _T44 = (_T42 < _T43) [ _T2 _T42 _T27 _T44 ]
END BY BEQZ, if _T44 = 
    0 : goto 7; 1 : goto 6
BASIC BLOCK 6 : 
  Def     = [ _T45 _T46 ]
  defDU   = [ ]
  redef   = [ _T45 _T46 ]
  liveUseDU = [ (93, _T42) ]
  liveUse = [ _T42 ]
  liveIn  = [ _T2 _T27 _T42 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (93, _T42) (101, _T42) (106, _T42) ]
  liveOut = [ _T2 _T27 _T42 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (101, _T42) (106, _T42) ]
    92 _T45 = 0 [ _T2 _T42 _T27 _T45 ]
    93 _T46 = (_T42 < _T45) [ _T2 _T42 _T27 _T46 ]
END BY BEQZ, if _T46 = 
    0 : goto 8; 1 : goto 7
BASIC BLOCK 7 : 
  Def     = [ _T47 ]
  defDU   = [ ]
  redef   = [ _T47 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T2 _T27 _T42 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (101, _T42) (106, _T42) ]
  liveOut = [ _T2 _T27 _T42 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (101, _T42) (106, _T42) ]
    95 _T47 = "Decaf runtime error: Array subscript out of bounds\n" [ _T2 _T42 _T27 _T47 ]
    96 parm _T47 [ _T2 _T42 _T27 ]
    97 call _PrintString [ _T2 _T42 _T27 ]
    98 call _Halt [ _T2 _T42 _T27 ]
END BY BRANCH, goto 8
BASIC BLOCK 8 : 
  Def     = [ _T48 _T49 _T50 _T51 _T52 _T53 _T54 _T55 _T56 _T57 _T58 ]
  defDU   = [ (114, _T56) (122, _T56) ]
  redef   = [ _T48 _T49 _T50 _T51 _T52 _T53 _T54 _T55 _T56 _T57 _T58 ]
  liveUseDU = [ (102, _T27) (107, _T27) (110, _T27) (101, _T42) (106, _T42) ]
  liveUse = [ _T27 _T42 ]
  liveIn  = [ _T2 _T27 _T42 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (101, _T42) (106, _T42) ]
  liveOut = [ _T2 _T27 _T56 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (114, _T56) (122, _T56) ]
    100 _T48 = 4 [ _T48 _T2 _T42 _T27 ]
    101 _T49 = (_T42 * _T48) [ _T49 _T2 _T42 _T27 ]
    102 _T50 = (_T27 + _T49) [ _T2 _T50 _T42 _T27 ]
    103 _T51 = *(_T50 + 0) [ _T2 _T42 _T27 ]
    104 _T52 = 0 [ _T2 _T52 _T42 _T27 ]
    105 _T53 = 4 [ _T2 _T52 _T53 _T42 _T27 ]
    106 _T54 = (_T42 * _T53) [ _T2 _T52 _T54 _T27 ]
    107 _T55 = (_T27 + _T54) [ _T2 _T52 _T55 _T27 ]
    108 *(_T55 + 0) = _T52 [ _T2 _T27 ]
    109 _T56 = 0 [ _T2 _T56 _T27 ]
    110 _T57 = *(_T27 - 4) [ _T2 _T56 _T57 _T27 ]
    111 _T58 = (_T56 < _T57) [ _T2 _T56 _T58 _T27 ]
END BY BEQZ, if _T58 = 
    0 : goto 10; 1 : goto 9
BASIC BLOCK 9 : 
  Def     = [ _T59 _T60 ]
  defDU   = [ ]
  redef   = [ _T59 _T60 ]
  liveUseDU = [ (114, _T56) ]
  liveUse = [ _T56 ]
  liveIn  = [ _T2 _T27 _T56 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (114, _T56) (122, _T56) ]
  liveOut = [ _T2 _T27 _T56 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (122, _T56) ]
    113 _T59 = 0 [ _T2 _T56 _T27 _T59 ]
    114 _T60 = (_T56 < _T59) [ _T2 _T56 _T27 _T60 ]
END BY BEQZ, if _T60 = 
    0 : goto 11; 1 : goto 10
BASIC BLOCK 10 : 
  Def     = [ _T61 ]
  defDU   = [ ]
  redef   = [ _T61 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T2 _T27 _T56 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (122, _T56) ]
  liveOut = [ _T2 _T27 _T56 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (122, _T56) ]
    116 _T61 = "Decaf runtime error: Array subscript out of bounds\n" [ _T2 _T56 _T27 _T61 ]
    117 parm _T61 [ _T2 _T56 _T27 ]
    118 call _PrintString [ _T2 _T56 _T27 ]
    119 call _Halt [ _T2 _T56 _T27 ]
END BY BRANCH, goto 11
BASIC BLOCK 11 : 
  Def     = [ _T62 _T63 _T64 _T65 _T66 _T67 ]
  defDU   = [ (129, _T65) (137, _T65) ]
  redef   = [ _T62 _T63 _T64 _T65 _T66 _T67 ]
  liveUseDU = [ (123, _T27) (125, _T27) (122, _T56) ]
  liveUse = [ _T27 _T56 ]
  liveIn  = [ _T2 _T27 _T56 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (122, _T56) ]
  liveOut = [ _T2 _T27 _T65 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (129, _T65) (137, _T65) ]
    121 _T62 = 4 [ _T2 _T56 _T27 _T62 ]
    122 _T63 = (_T56 * _T62) [ _T2 _T27 _T63 ]
    123 _T64 = (_T27 + _T63) [ _T64 _T2 _T27 ]
    124 _T65 = *(_T64 + 0) [ _T65 _T2 _T27 ]
    125 _T66 = *(_T27 - 4) [ _T65 _T2 _T66 _T27 ]
    126 _T67 = (_T65 < _T66) [ _T65 _T2 _T67 _T27 ]
END BY BEQZ, if _T67 = 
    0 : goto 13; 1 : goto 12
BASIC BLOCK 12 : 
  Def     = [ _T68 _T69 ]
  defDU   = [ ]
  redef   = [ _T68 _T69 ]
  liveUseDU = [ (129, _T65) ]
  liveUse = [ _T65 ]
  liveIn  = [ _T2 _T27 _T65 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (129, _T65) (137, _T65) ]
  liveOut = [ _T2 _T27 _T65 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (137, _T65) ]
    128 _T68 = 0 [ _T65 _T2 _T68 _T27 ]
    129 _T69 = (_T65 < _T68) [ _T65 _T2 _T69 _T27 ]
END BY BEQZ, if _T69 = 
    0 : goto 14; 1 : goto 13
BASIC BLOCK 13 : 
  Def     = [ _T70 ]
  defDU   = [ ]
  redef   = [ _T70 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T2 _T27 _T65 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (137, _T65) ]
  liveOut = [ _T2 _T27 _T65 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (137, _T65) ]
    131 _T70 = "Decaf runtime error: Array subscript out of bounds\n" [ _T65 _T2 _T70 _T27 ]
    132 parm _T70 [ _T65 _T2 _T27 ]
    133 call _PrintString [ _T65 _T2 _T27 ]
    134 call _Halt [ _T65 _T2 _T27 ]
END BY BRANCH, goto 14
BASIC BLOCK 14 : 
  Def     = [ _T71 _T72 _T73 _T74 _T75 _T76 _T77 ]
  defDU   = [ ]
  redef   = [ _T71 _T72 _T73 _T74 _T75 _T76 _T77 ]
  liveUseDU = [ (138, _T27) (145, _T27) (137, _T65) ]
  liveUse = [ _T27 _T65 ]
  liveIn  = [ _T2 _T27 _T65 ]
  liveInDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) (137, _T65) ]
  liveOut = [ _T2 _T27 ]
  liveOutDU = [ (69, _T2) (71, _T2) (89, _T27) (102, _T27) (107, _T27) (110, _T27) (123, _T27) (125, _T27) (138, _T27) (145, _T27) ]
    136 _T71 = 4 [ _T65 _T2 _T71 _T27 ]
    137 _T72 = (_T65 * _T71) [ _T2 _T72 _T27 ]
    138 _T73 = (_T27 + _T72) [ _T2 _T73 _T27 ]
    139 _T74 = *(_T73 + 0) [ _T2 _T74 _T27 ]
    140 parm _T74 [ _T2 _T27 ]
    141 call _PrintInt [ _T2 _T27 ]
    142 _T75 = "\n" [ _T2 _T27 _T75 ]
    143 parm _T75 [ _T2 _T27 ]
    144 call _PrintString [ _T2 _T27 ]
    145 _T76 = *(_T27 - 4) [ _T2 _T27 _T76 ]
    146 parm _T76 [ _T2 _T27 ]
    147 call _PrintInt [ _T2 _T27 ]
    148 _T77 = "\n" [ _T2 _T27 _T77 ]
    149 parm _T77 [ _T2 _T27 ]
    150 call _PrintString [ _T2 _T27 ]
END BY RETURN, void result

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T78 _T79 _T80 ]
  defDU   = [ ]
  redef   = [ _T78 _T79 _T80 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ ]
  liveOutDU = [ ]
    152 _T78 =  call _Main_New [ _T78 ]
    153 parm _T78 [ _T78 ]
    154 _T79 = *(_T78 + 0) [ _T79 ]
    155 _T80 = *(_T79 + 12) [ _T80 ]
    156 call _T80 [ ]
END BY RETURN, void result

