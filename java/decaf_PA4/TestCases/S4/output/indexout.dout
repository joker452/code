FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T0 _T1 _T2 ]
  defDU   = [ ]
  redef   = [ _T0 _T1 _T2 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ ]
  liveOutDU = [ ]
    1 _T0 = 4 [ _T0 ]
    2 parm _T0 [ ]
    3 _T1 =  call _Alloc [ _T1 ]
    4 _T2 = VTBL <_Main> [ _T1 _T2 ]
    5 *(_T1 + 0) = _T2 [ _T1 ]
END BY RETURN, result = _T1

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T4 _T5 _T6 ]
  defDU   = [ (17, _T4) (21, _T4) ]
  redef   = [ _T4 _T5 _T6 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ _T4 ]
  liveOutDU = [ (17, _T4) (21, _T4) ]
    7 _T4 = 2 [ _T4 ]
    8 _T5 = 0 [ _T4 _T5 ]
    9 _T6 = (_T4 < _T5) [ _T4 _T6 ]
END BY BEQZ, if _T6 = 
    0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T7 ]
  defDU   = [ ]
  redef   = [ _T7 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T4 ]
  liveInDU = [ (17, _T4) (21, _T4) ]
  liveOut = [ _T4 ]
  liveOutDU = [ (17, _T4) (21, _T4) ]
    11 _T7 = "Decaf runtime error: Cannot create negative-sized array\n" [ _T4 _T7 ]
    12 parm _T7 [ _T4 ]
    13 call _PrintString [ _T4 ]
    14 call _Halt [ _T4 ]
END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T8 _T9 _T10 _T11 _T12 ]
  defDU   = [ (25, _T8) (27, _T8) (25, _T10) (27, _T11) (30, _T11) (28, _T12) ]
  redef   = [ _T8 _T9 _T10 _T11 _T12 ]
  liveUseDU = [ (17, _T4) (21, _T4) ]
  liveUse = [ _T4 ]
  liveIn  = [ _T4 ]
  liveInDU = [ (17, _T4) (21, _T4) ]
  liveOut = [ _T8 _T10 _T11 _T12 ]
  liveOutDU = [ (25, _T8) (27, _T8) (25, _T10) (27, _T11) (30, _T11) (28, _T12) ]
    16 _T8 = 4 [ _T4 _T8 ]
    17 _T9 = (_T8 * _T4) [ _T4 _T8 _T9 ]
    18 _T10 = (_T8 + _T9) [ _T4 _T8 _T10 ]
    19 parm _T10 [ _T4 _T8 _T10 ]
    20 _T11 =  call _Alloc [ _T4 _T8 _T10 _T11 ]
    21 *(_T11 + 0) = _T4 [ _T8 _T10 _T11 ]
    22 _T12 = 0 [ _T8 _T10 _T11 _T12 ]
    23 _T11 = (_T11 + _T10) [ _T8 _T10 _T11 _T12 ]
END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ ]
  defDU   = [ (25, _T10) ]
  redef   = [ _T10 ]
  liveUseDU = [ (25, _T8) (25, _T10) ]
  liveUse = [ _T8 _T10 ]
  liveIn  = [ _T8 _T10 _T11 _T12 ]
  liveInDU = [ (25, _T8) (27, _T8) (25, _T10) (27, _T11) (30, _T11) (28, _T12) ]
  liveOut = [ _T8 _T10 _T11 _T12 ]
  liveOutDU = [ (25, _T8) (27, _T8) (25, _T10) (27, _T11) (30, _T11) (28, _T12) ]
    25 _T10 = (_T10 - _T8) [ _T8 _T10 _T11 _T12 ]
END BY BEQZ, if _T10 = 
    0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ ]
  defDU   = [ (27, _T11) (30, _T11) ]
  redef   = [ _T11 ]
  liveUseDU = [ (27, _T8) (27, _T11) (28, _T12) ]
  liveUse = [ _T8 _T11 _T12 ]
  liveIn  = [ _T8 _T10 _T11 _T12 ]
  liveInDU = [ (25, _T8) (27, _T8) (25, _T10) (27, _T11) (28, _T12) ]
  liveOut = [ _T8 _T10 _T11 _T12 ]
  liveOutDU = [ (25, _T8) (27, _T8) (25, _T10) (27, _T11) (30, _T11) (28, _T12) ]
    27 _T11 = (_T11 - _T8) [ _T8 _T10 _T11 _T12 ]
    28 *(_T11 + 0) = _T12 [ _T8 _T10 _T11 _T12 ]
END BY BRANCH, goto 3
BASIC BLOCK 5 : 
  Def     = [ _T3 _T13 _T14 _T15 ]
  defDU   = [ (45, _T3) (50, _T3) (36, _T13) (44, _T13) (49, _T13) ]
  redef   = [ _T3 _T13 _T14 _T15 ]
  liveUseDU = [ (30, _T11) ]
  liveUse = [ _T11 ]
  liveIn  = [ _T11 ]
  liveInDU = [ (30, _T11) ]
  liveOut = [ _T3 _T13 ]
  liveOutDU = [ (45, _T3) (50, _T3) (36, _T13) (44, _T13) (49, _T13) ]
    30 _T3 = _T11 [ _T3 ]
    31 _T13 = 2 [ _T3 _T13 ]
    32 _T14 = *(_T3 - 4) [ _T3 _T13 _T14 ]
    33 _T15 = (_T13 < _T14) [ _T3 _T13 _T15 ]
END BY BEQZ, if _T15 = 
    0 : goto 7; 1 : goto 6
BASIC BLOCK 6 : 
  Def     = [ _T16 _T17 ]
  defDU   = [ ]
  redef   = [ _T16 _T17 ]
  liveUseDU = [ (36, _T13) ]
  liveUse = [ _T13 ]
  liveIn  = [ _T3 _T13 ]
  liveInDU = [ (45, _T3) (50, _T3) (36, _T13) (44, _T13) (49, _T13) ]
  liveOut = [ _T3 _T13 ]
  liveOutDU = [ (45, _T3) (50, _T3) (44, _T13) (49, _T13) ]
    35 _T16 = 0 [ _T16 _T3 _T13 ]
    36 _T17 = (_T13 < _T16) [ _T17 _T3 _T13 ]
END BY BEQZ, if _T17 = 
    0 : goto 8; 1 : goto 7
BASIC BLOCK 7 : 
  Def     = [ _T18 ]
  defDU   = [ ]
  redef   = [ _T18 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ _T3 _T13 ]
  liveInDU = [ (45, _T3) (50, _T3) (44, _T13) (49, _T13) ]
  liveOut = [ _T3 _T13 ]
  liveOutDU = [ (45, _T3) (50, _T3) (44, _T13) (49, _T13) ]
    38 _T18 = "Decaf runtime error: Array subscript out of bounds\n" [ _T18 _T3 _T13 ]
    39 parm _T18 [ _T3 _T13 ]
    40 call _PrintString [ _T3 _T13 ]
    41 call _Halt [ _T3 _T13 ]
END BY BRANCH, goto 8
BASIC BLOCK 8 : 
  Def     = [ _T19 _T20 _T21 _T22 _T23 _T24 _T25 _T26 ]
  defDU   = [ ]
  redef   = [ _T19 _T20 _T21 _T22 _T23 _T24 _T25 _T26 ]
  liveUseDU = [ (45, _T3) (50, _T3) (44, _T13) (49, _T13) ]
  liveUse = [ _T3 _T13 ]
  liveIn  = [ _T3 _T13 ]
  liveInDU = [ (45, _T3) (50, _T3) (44, _T13) (49, _T13) ]
  liveOut = [ ]
  liveOutDU = [ ]
    43 _T19 = 4 [ _T3 _T19 _T13 ]
    44 _T20 = (_T13 * _T19) [ _T3 _T20 _T13 ]
    45 _T21 = (_T3 + _T20) [ _T3 _T21 _T13 ]
    46 _T22 = *(_T21 + 0) [ _T3 _T13 ]
    47 _T23 = 0 [ _T3 _T23 _T13 ]
    48 _T24 = 4 [ _T3 _T23 _T24 _T13 ]
    49 _T25 = (_T13 * _T24) [ _T3 _T23 _T25 ]
    50 _T26 = (_T3 + _T25) [ _T23 _T26 ]
    51 *(_T26 + 0) = _T23 [ ]
END BY RETURN, void result

