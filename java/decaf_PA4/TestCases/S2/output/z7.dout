FUNCTION _Father_New : 
BASIC BLOCK 0 : 
  Def     = [ _T3 _T4 _T5 _T6 ]
  defDU   = [ ]
  redef   = [ _T3 _T4 _T5 _T6 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ ]
  liveOutDU = [ ]
    1 _T3 = 8 [ _T3 ]
    2 parm _T3 [ ]
    3 _T4 =  call _Alloc [ _T4 ]
    4 _T5 = 0 [ _T4 _T5 ]
    5 *(_T4 + 4) = _T5 [ _T4 ]
    6 _T6 = VTBL <_Father> [ _T4 _T6 ]
    7 *(_T4 + 0) = _T6 [ _T4 ]
END BY RETURN, result = _T4

FUNCTION _Child_New : 
BASIC BLOCK 0 : 
  Def     = [ _T7 _T8 _T9 _T10 ]
  defDU   = [ ]
  redef   = [ _T7 _T8 _T9 _T10 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ ]
  liveOutDU = [ ]
    9 _T7 = 8 [ _T7 ]
    10 parm _T7 [ ]
    11 _T8 =  call _Alloc [ _T8 ]
    12 _T9 = 0 [ _T8 _T9 ]
    13 *(_T8 + 4) = _T9 [ _T8 ]
    14 _T10 = VTBL <_Child> [ _T8 _T10 ]
    15 *(_T8 + 0) = _T10 [ _T8 ]
END BY RETURN, result = _T8

FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T11 _T12 _T13 ]
  defDU   = [ ]
  redef   = [ _T11 _T12 _T13 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ ]
  liveOutDU = [ ]
    17 _T11 = 4 [ _T11 ]
    18 parm _T11 [ ]
    19 _T12 =  call _Alloc [ _T12 ]
    20 _T13 = VTBL <_Main> [ _T12 _T13 ]
    21 *(_T12 + 0) = _T13 [ _T12 ]
END BY RETURN, result = _T12

FUNCTION _Father.method : 
BASIC BLOCK 0 : 
  Def     = [ _T14 _T15 _T16 _T17 _T18 ]
  defDU   = [ ]
  redef   = [ _T14 _T15 _T16 _T17 _T18 ]
  liveUseDU = [ (24, _T1) (26, _T1) ]
  liveUse = [ _T1 ]
  liveIn  = [ _T0 _T1 ]
  liveInDU = [ (32, _T0) (34, _T0) (24, _T1) (26, _T1) (30, _T1) (38, _T1) ]
  liveOut = [ _T0 _T1 ]
  liveOutDU = [ (32, _T0) (34, _T0) (30, _T1) (38, _T1) ]
    23 _T14 = 0 [ _T0 _T1 _T14 ]
    24 _T15 = (_T1 > _T14) [ _T0 _T1 _T15 ]
    25 _T16 = 10 [ _T0 _T16 _T1 _T15 ]
    26 _T17 = (_T1 < _T16) [ _T0 _T1 _T17 _T15 ]
    27 _T18 = (_T15 && _T17) [ _T0 _T1 _T18 ]
END BY BEQZ, if _T18 = 
    0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T19 _T20 _T21 _T22 _T23 ]
  defDU   = [ ]
  redef   = [ _T1 _T19 _T20 _T21 _T22 _T23 ]
  liveUseDU = [ (32, _T0) (34, _T0) (30, _T1) ]
  liveUse = [ _T0 _T1 ]
  liveIn  = [ _T0 _T1 ]
  liveInDU = [ (32, _T0) (34, _T0) (30, _T1) ]
  liveOut = [ ]
  liveOutDU = [ ]
    29 _T19 = 3 [ _T0 _T1 _T19 ]
    30 _T20 = (_T1 - _T19) [ _T0 _T20 ]
    31 _T1 = _T20 [ _T0 _T1 ]
    32 parm _T0 [ _T0 _T1 ]
    33 parm _T1 [ _T0 ]
    34 _T21 = *(_T0 + 0) [ _T21 ]
    35 _T22 = *(_T21 + 8) [ _T22 ]
    36 _T23 =  call _T22 [ _T23 ]
END BY RETURN, result = _T23
BASIC BLOCK 2 : 
  Def     = [ ]
  defDU   = [ ]
  redef   = [ ]
  liveUseDU = [ (38, _T1) ]
  liveUse = [ _T1 ]
  liveIn  = [ _T1 ]
  liveInDU = [ (38, _T1) ]
  liveOut = [ ]
  liveOutDU = [ ]
END BY RETURN, result = _T1

FUNCTION _Child.start : 
BASIC BLOCK 0 : 
  Def     = [ _T24 _T25 _T26 _T27 _T28 ]
  defDU   = [ ]
  redef   = [ _T24 _T25 _T26 _T27 _T28 ]
  liveUseDU = [ (39, _T2) (45, _T2) ]
  liveUse = [ _T2 ]
  liveIn  = [ _T2 ]
  liveInDU = [ (39, _T2) (45, _T2) ]
  liveOut = [ ]
  liveOutDU = [ ]
    39 _T24 = _T2 [ _T2 _T24 ]
    40 _T25 = *(_T24 + 4) [ _T2 _T24 ]
    41 _T26 = 5 [ _T2 _T24 _T26 ]
    42 *(_T24 + 4) = _T26 [ _T2 ]
    43 _T27 = 0 [ _T2 _T27 ]
    44 _T24 = _T27 [ _T2 ]
    45 _T28 = *(_T2 + 4) [ _T28 ]
    46 parm _T28 [ ]
    47 call _PrintInt [ ]
END BY RETURN, void result

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T29 _T30 _T31 _T32 _T33 _T34 _T35 _T36 _T37 ]
  defDU   = [ ]
  redef   = [ _T29 _T30 _T31 _T32 _T33 _T34 _T35 _T36 _T37 ]
  liveUseDU = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveInDU = [ ]
  liveOut = [ ]
  liveOutDU = [ ]
    49 _T30 =  call _Child_New [ _T30 ]
    50 _T29 = _T30 [ _T29 ]
    51 _T31 = 5 [ _T29 _T31 ]
    52 parm _T29 [ _T29 _T31 ]
    53 parm _T31 [ _T29 ]
    54 _T32 = *(_T29 + 0) [ _T32 _T29 ]
    55 _T33 = *(_T32 + 8) [ _T33 _T29 ]
    56 _T34 =  call _T33 [ _T34 _T29 ]
    57 parm _T34 [ _T29 ]
    58 call _PrintInt [ _T29 ]
    59 _T35 = "\n" [ _T35 _T29 ]
    60 parm _T35 [ _T29 ]
    61 call _PrintString [ _T29 ]
    62 parm _T29 [ _T29 ]
    63 _T36 = *(_T29 + 0) [ _T36 ]
    64 _T37 = *(_T36 + 12) [ _T37 ]
    65 call _T37 [ ]
END BY RETURN, void result

